openapi: 3.0.0
info:
  version: 1.0.1
  title: My API
  description: This is a sample server Stray Spotter
servers:
  - url: http://127.0.0.1:3000
    description: Development server
paths:
  /api/images:
    get:
      summary: Retrieves a list of image keys from the cloud
      description: |
        Returns up to a specified number of image keys based on the client's query parameter.
        The image keys are sorted in descending order of their numerical value extracted from the key names.
      parameters:
        - in: query
          name: maxKeys
          required: true
          schema:
            type: integer
            example: 10
          description: The number of image keys to return.
      responses:
        '200':
          description: A sorted list of image keys from the cloud
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: The key of an image stored in the cloud.
        '500':
          description: Internal server error when fetching image keys from the cloud
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message explaining the cause of failure
  /api/image-url:
    get:
      summary: Generates a pre-signed URL.
      description: Generates a pre-signed URL from the cloud.
      parameters:
        - in: query
          name: key
          required: true
          schema:
            type: string
          description: The key of the image in the cloud.
      responses:
        '200':
          description: A JSON object containing the pre-signed URL.
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: The pre-signed URL to access the image.
        '400':
          description: Bad Request. Missing key query parameter.
        '500':
          description: Internal server error if fetching data or generating URL fails.
  /api/report:
    get:
      summary: Generates a report based on the time frame method.
      description: Generates a report based on the specified time frame ('day', 'week', 'month').
      parameters:
        - in: query
          name: method
          required: true
          schema:
            type: string
            enum: [day, week, month]
          description: The time frame for the report.
      responses:
        '200':
          description: The report data generated based on the specified time frame.
          content:
            application/json:
              schema:
                type: object
                description: The generated report data.
        '400':
          description: Bad Request. Missing or invalid 'method' query parameter.
        '500':
          description: Internal server error if report generation or database interaction fails.
  /api/classification/{id}:
    get:
      summary: Classifies an image as a cat or not
      description: |
        Calls an external classification server to classify an image as a cat or not.
      parameters:
        - name: id
          in: path
          description: The image ID for classification.
          required: true
          schema:
            type: string
      responses:
        200:
          description: A JSON response indicating whether the image is classified as a cat
          content:
            application/json:
              schema:
                type: object
                properties:
                  isCat:
                    type: boolean
                    description: Indicates if the image is classified as a cat (true/false).
        500:
          description: Error occurred while fetching the classification data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message explaining the cause of failure.
  /api/upload:
    post:
      summary: Handles file upload, processes EXIF data, and stores image metadata in the database.
      description: Uploads an image file, processes EXIF data, stores metadata (latitude, longitude, etc.), and uploads the image to cloud storage.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The image file to upload.
                category:
                  type: string
                  description: The category representing the cat's condition (e.g., "happy", "normal", "sad").
      responses:
        200:
          description: Successfully uploaded the image and stored metadata in the database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message indicating the image was successfully uploaded and metadata saved.
                  picture_id:
                    type: string
                    description: The unique identifier of the uploaded image.
        400:
          description: Missing file or invalid file format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message explaining the issue (e.g., 'No file selected!').
        500:
          description: Internal server error during file upload, EXIF data parsing, or database insertion.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message detailing the cause of the failure.


  /api/admin/db:
    get:
      summary: Fetch all data from DB
      description: Fetch all data from DB in JSON
      responses:
        200:
          description: Return the data from the db in JSON
        500:
          description: Return error with the message